---
- name: Setup Exel Stack
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: Import VPC setup variable
      include_vars: vars/output_vars

    - name: Import exel setup variables
      include_vars: vars/exel-stack-setup

    - name: Create exel ec2 key
      ec2_key:
        name: exelkey
        region: "{{region}}"
      register: exelkey_out

    - name: Save private key into file loginkey_exel.pem
      copy:
        content: "{{exelkey_out.key.private_key}}"
        dest: "./loginkey_exel.pem"
        mode: 0600
      when: exelkey_out.changed

    - name: Create Security Group for Load Balancer
      ec2_group:
        name: exelELB-SG
        description: Allow port 80 from everywhere and all port withing the SG
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
        register: exelELBSG_out

    - name: Create Security Group for Exel Stack
      ec2_group:
        name: exelStack-SG
        description: Allow port 22 from everywhere and all withing SG
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: no
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{exelELBSG_out.group_id}}"

          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{BastionSGid}}"
        register: exelStackSG_out

    - name: Update Security Group with it's own SG ID
      ec2_group:
        name: exelStack-sg
        description: Allow port 22 from everywhere and all port withing sg
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: no
        rules:
          - proto: all
            group_id: "{{exelStackSG_out.group_id}}"

    - name: Creating Nginx web01
      ec2:
        key_name: exelkey
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{nginx_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "web01"
          Project: Exel
          Owner: DevOps Team
        exact_count: 1
        count_tag:
          Name: "web01"
          Project: Exel
          Owner: DevOps Team
        group_id: "{{exelStackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: web01_out

    - name: Creating tomcat app01
      ec2:
        key_name: exelkey
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{tomcat_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "app01"
          Project: Exel
          Owner: DevOps Team
        exact_count: 1
        count_tag:
          Name: "wapp01"
          Project: Exel
          Owner: DevOps Team
        group_id: "{{exelStackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: app01_out

    - name: Creating memcache mc01
      ec2:
        key_name: exelkey
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{memcache_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "mc01"
          Project: Exel
          Owner: DevOps Team
        exact_count: 1
        count_tag:
          Name: "mc01"
          Project: Exel
          Owner: DevOps Team
        group_id: "{{exelStackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: mc01_out

    - name: Creating RabbitMQ rmq01
      ec2:
        key_name: exelkey
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{rmq_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "rmq01"
          Project: Exel
          Owner: DevOps Team
        exact_count: 1
        count_tag:
          Name: "rmq01"
          Project: Exel
          Owner: DevOps Team
        group_id: "{{exelStackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: rmq01_out

    - name: Creating Mysql db01
      ec2:
        key_name: exelkey
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{mysql_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "db01"
          Project: Exel
          Owner: DevOps Team
        exact_count: 1
        count_tag:
          Name: "db01"
          Project: Exel
          Owner: DevOps Team
        group_id: "{{exelStackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: db01_out

    - debug:
        var: db01_out.tagged_instances[0].id

    - local_action:
        module: ec2_elb_lb
        name: "exel-elb"
        region: "{{region}}"
        state: present
        instance_ids:
          - "{{web01_out.tagged_instances[0].id}}"
        purge_instance_ids: true
        security_group_ids: "{{exelELBSG.out.group_id}}"
        subnets:
          - "{{ pubsub1id }}"
          - "{{ pubsub2id }}"
          - "{{ pubsub3id }}"
        listeners:
          - protocol: http #options are http. https, ssl, tcp
            load_balancer_port: 80
            instance_port: 80

    - name: Insert/Update Hosts IP and Name in file provisions-stack-group_vars/hostsip
      blockinfile:
        path: provision-stack/group_vars/hostsip
        block: |
          web01_ip: {{ web01_out.tagged_instance[0].private_ip }}
          app01_ip: {{ app01_out.tagged_instance[0].private_ip }}
          rmq01_ip: {{ rmq01_out.tagged_instance[0].private_ip }}
          mc01_ip: {{ mc01_out.tagged_instance[0].private_ip }}
          db01_ip: {{ db01_out.tagged_instance[0].private_ip }}

    - name: Copy login key to provision_stack directory
      copy:
        src: loginkey_exel.pem
        dest: provision-stack/loginkey_exel.pem
        mode: '0400'
    - name: Insert/Update Inventory file provision-stack/inventory-exel
      blockinfile:
        path: provision-stack/inventory-exel
        block: |
          web01 ansible_host={{ web01_out.tagged_instance[0].private_ip }}
          app01 ansible_host={{ app01_out.tagged_instance[0].private_ip }}
          rmq01 ansible_host={{ rmq01_out.tagged_instance[0].private_ip }}
          mc01 ansible_host={{ mc01_out.tagged_instance[0].private_ip }}
          db01 ansible_host={{ db01_out.tagged_instance[0].private_ip }}
          cntl ansible_host=127.0.0.1 ansible_connection=local
          
          [websrvgrp]
          web01
          
          [appsrvgrp]
          app01
          
          [rmqsrvgrp]
          rmq01
          
          [mcsrvgrp]
          mc01
          
          [dbsrvgrp]
          db01
          
          [control]
          cntl
          
          [stack_inst:children]
          websrvgrp
          appsrvgrp
          rmqsrvgrp
          mcsrvgrp
          dbsrvgrp
          
          [stack_inst:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=loginkey_vpro.pem
          #ansible_python_interpreter=/usr/bin/python3
          
          
                    

          
          
          
          
        
    


